// <auto-generated />
using System;
using Education.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Education.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Education.Domain.Entities.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("GradedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<int>("Mark")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeacherId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TeacherId1");

                    b.HasIndex("StudentId", "LessonId")
                        .IsUnique();

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Education.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Education.Domain.Entities.Homework", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Homeworks");
                });

            modelBuilder.Entity("Education.Domain.Entities.HomeworkSubmission", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HomeworkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("StudentId", "HomeworkId");

                    b.HasIndex("HomeworkId");

                    b.ToTable("HomeworkSubmissions");
                });

            modelBuilder.Entity("Education.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ClassTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeacherId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId2")
                        .HasColumnType("uuid");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TeacherId1");

                    b.HasIndex("TeacherId2");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Education.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Education.Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("LessonStudent", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("_lessonsId")
                        .HasColumnType("uuid");

                    b.HasKey("StudentId", "_lessonsId");

                    b.HasIndex("_lessonsId");

                    b.ToTable("StudentLessons", (string)null);
                });

            modelBuilder.Entity("Education.Domain.Entities.Grade", b =>
                {
                    b.HasOne("Education.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Grades")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.Domain.Entities.Student", "Student")
                        .WithMany("_grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.Domain.Entities.Teacher", "Teacher")
                        .WithMany("_grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.Domain.Entities.Teacher", null)
                        .WithMany("AssignedGrades")
                        .HasForeignKey("TeacherId1");

                    b.Navigation("Lesson");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Education.Domain.Entities.Homework", b =>
                {
                    b.HasOne("Education.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Homeworks")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Education.Domain.Entities.HomeworkSubmission", b =>
                {
                    b.HasOne("Education.Domain.Entities.Homework", "Homework")
                        .WithMany()
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.Domain.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homework");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Education.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("Education.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.Domain.Entities.Teacher", null)
                        .WithMany("ScheduledLessons")
                        .HasForeignKey("TeacherId");

                    b.HasOne("Education.Domain.Entities.Teacher", null)
                        .WithMany("TeachedLessons")
                        .HasForeignKey("TeacherId1");

                    b.HasOne("Education.Domain.Entities.Teacher", "Teacher")
                        .WithMany("_lessons")
                        .HasForeignKey("TeacherId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Education.Domain.Entities.Student", b =>
                {
                    b.HasOne("Education.Domain.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Education.Domain.Entities.Teacher", b =>
                {
                    b.OwnsOne("Education.Domain.Entities.HomeworkBank", "HomeworkBank", b1 =>
                        {
                            b1.Property<Guid>("TeacherId")
                                .HasColumnType("uuid");

                            b1.HasKey("TeacherId");

                            b1.ToTable("Teachers");

                            b1.WithOwner()
                                .HasForeignKey("TeacherId");

                            b1.OwnsMany("Education.Domain.Entities.HomeworkTemplate", "_templates", b2 =>
                                {
                                    b2.Property<Guid>("TeacherId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Topic")
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)");

                                    b2.HasKey("TeacherId", "Topic");

                                    b2.ToTable("HomeworkTemplate");

                                    b2.WithOwner()
                                        .HasForeignKey("TeacherId");
                                });

                            b1.Navigation("_templates");
                        });

                    b.Navigation("HomeworkBank")
                        .IsRequired();
                });

            modelBuilder.Entity("LessonStudent", b =>
                {
                    b.HasOne("Education.Domain.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.Domain.Entities.Lesson", null)
                        .WithMany()
                        .HasForeignKey("_lessonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Education.Domain.Entities.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Education.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Homeworks");
                });

            modelBuilder.Entity("Education.Domain.Entities.Student", b =>
                {
                    b.Navigation("_grades");
                });

            modelBuilder.Entity("Education.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("AssignedGrades");

                    b.Navigation("ScheduledLessons");

                    b.Navigation("TeachedLessons");

                    b.Navigation("_grades");

                    b.Navigation("_lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
